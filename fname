#!/bin/bash
#
# fname 
#

s_VERSION="1.2"

#START_DIR="$(pwd)"
#START_DIR='.'
START_DIR='*'
FIND_OPT1=""
FIND_OPT2=""
FIND_TYPE="f"
FIND_OPT_GLOBAL=""
FIND_TEST_NOT=""
NAME_CASE="-name"

EXE_NAME="`realpath $0`"
EXE_BASE="`basename ${EXE_NAME}`"
EXE_DIR="`dirname ${EXE_NAME}`"

DO_EXE_CMD=""
DO_EXE_CMD_MAX_ARGC=5

function this_usage() {
    ${EXE_DIR}/asc reset green 
    printf '\n=== search filename: %s Version:%s\n' "${EXE_BASE}" "${s_VERSION}"
    printf " Usage:\n\t %s\t [options] search_name_patterns\n" "${EXE_BASE}"
    printf 'options:\n'
    printf ' --findtype | -t: specify find type\n'
    printf '\t Example search type: file and directory: \"-t=f,d\"\n'
    printf ' --findopt | -o: specify find option, these options are placed before the (starting) path parameter\n'
    printf '\t Valid options are: -H, -L, -P, Note: -P is the default behavior\n'
    printf '\t Example: -o=-L\n'
    printf ' --nolink   | -nl: do not print files that has symbolic link\n'
    printf ' --exe=xx|-e=xx  : execute xx command with found result as arguments, default command is $EDITOR=%s\n' "${EDITOR}"
    printf ' --findlink | -L : print files with their symbolic link, if any\n'
    printf '\t the same as using \"--findopt=-L\" OR \"-o=-L\"\n'
    printf ' --Ll | -lL: \"--findlink\" option plus long (ls) format output\n'
    printf ' --start=x|-s=x: search starting directory at x\n'
    printf ' --long|-ls|-l: feed find result to \"ls -l" command\n'
    printf ' --num|-n: display line number, auto enabled if use --exe/-e\n'
    printf ' --dir|-d: separated to dirname/basename\n'
    printf ' --file|-f: serapated to basename/dirname, put basename before dirname\n'
    printf ' --color=x|-c=x: set output color to x, default: -c=green\n'
    printf '\nExamples:\n'
    printf '\t %s %s %s\n' "${EXE_BASE}" "'*.sh'"  "-l"
    printf '\t %s %s %s\n' "${EXE_BASE}" "soniccorex-image-dev.bb" "-e=vs"
    printf '\t %s %s %s\n' "${EXE_BASE}" "diag-*.bb" "-e"
    printf '\t %s %s %s\n' "${EXE_BASE}" "diag-*.bb" "-d -n"
    printf '\t %s %s %s\n' "${EXE_BASE}" "diag-*.bb" "-f -e"
    printf '\n'
    ${EXE_DIR}/asc reset
}

# needed for: fname '*.sh'
set -f

b_DEBUG=0
b_VERBOSE=0
b_ABS_PATH=0
b_LS_LONG=0
b_NO_LINK=0
b_FIND_LINK=0
b_DIS_NUM=0
b_DIS_STYLE=0
s_COLOR=""
N_ARG_SAVED=0
OPT_CNT=1
while [[ ! -z "$1" ]] 
do 
    if [[ ${b_DEBUG} -ne 0 ]] ; then 
        printf "\nDEBUG1: input option #%d = \"%s\"\n" ${OPT_CNT} "$1"
    fi 
# use "echo" failed if "$1" equals echo's options such as: "-n", etc...
#    echo "$1" | grep '^\-\-' >/dev/null
    printf '%s\n' "$1" | grep '^\-' >/dev/null
    if [[ $? -eq 0 ]] ; then  
        # removed trailing spaces of OPT_STR_2
        OPT_STR_1=`printf '%s\n' "$1" | sed 's/=/ /1' | awk '{print $1}' | sed -e 's/[[:space:]]*$//'`
        OPT_STR_2=""
#        echo "$1" | grep '=' >/dev/null
        printf '%s\n' "$1"  | grep '=' >/dev/null
        if [[ $? -eq 0 ]] ; then 
            OPT_STR_2=`printf '%s\n' "$1" | sed 's/=/ /1' | awk '{print $2 " " $3}' | sed -e 's/[[:space:]]*$//'`
        else 
            echo "$1" | grep "[[:digit:]]" >/dev/null
            if [[ $? -eq 0 ]] ; then 
                OPT_STR_1=`printf '%s\n' "$1" | sed 's/[[:digit:]]/ /1' | awk '{print $1}' | sed -e 's/[[:space:]]*$//'`
                OPT_STR_2=`printf '%s\n' "$1" | sed 's/[^0-9]*//g'`
            fi 
        fi  
        if [[ ${b_DEBUG} -ne 0 ]] ; then 
            printf "\nDEBUG-1: the #%d options parsed: #1=\"%s\", #2=\"%s\"\n" ${OPT_CNT} "${OPT_STR_1}" "${OPT_STR_2}"
        fi 
#
        if [[ "${OPT_STR_1}" = "--verbose" ]] ; then 
            if [[ -z "${OPT_STR_2}" ]] ; then 
        	b_VERBOSE=1
            else
                b_VERBOSE=${OPT_STR_2}
            fi
            if [[ ${b_DEBUG} -ne 0 ]] ; then 
                printf "\nINFO-1: set --verbose=%d, --debug=%d\n" ${b_VERBOSE} ${b_DEBUG}
            fi
        elif [[ "${OPT_STR_1}" = "--debug" ]] ; then 
            if [[ -z "${OPT_STR_2}" ]] ; then 
        	b_DEBUG=1
            else
                b_DEBUG=${OPT_STR_2}
            fi
            b_VERBOSE=1
            if [[ ${b_DEBUG} -ne 0 ]] ; then 
                printf "\nINFO-2: set --debug=%d, verbose=%d\n" ${b_DEBUG} ${b_VERBOSE}
            fi
        elif [[ "${OPT_STR_1}" == "--exe" || "${OPT_STR_1}" == "-e" ]] ; then  
            if [[ ! -z "${OPT_STR_2}" ]] ; then 
                DO_EXE_CMD="${OPT_STR_2}"
            else
                if [[ "${EDITOR}" != "" ]]; then 
                    DO_EXE_CMD="${EDITOR}"
                else
                    printf '\nERROR-01A: --exe option without command specified!\n' 
                    exit 1
                fi
            fi
            b_DIS_NUM=1
        elif [[ "${OPT_STR_1}" == "--type" || "${OPT_STR_1}" == "-t" ]] ; then  
            if [[ ! -z "${OPT_STR_2}" ]] ; then 
                FIND_TYPE="${OPT_STR_2}"
            fi
        elif [[ "${OPT_STR_1}" = "--start" || "${OPT_STR_1}" == "-s" ]] ; then  
            if [[ ! -z "${OPT_STR_2}" ]] ; then 
                START_DIR="${OPT_STR_2}"
            else 
                printf '\nWARNING: no value found for option --start/-s\n'  
            fi        
        elif [[ "${OPT_STR_1}" = "--color" || "${OPT_STR_1}" == "-c" ]] ; then  
            if [[ ! -z "${OPT_STR_2}" ]] ; then 
                s_COLOR="${OPT_STR_2}"
            else
                s_COLOR="green"
            fi        
        elif [[ "${OPT_STR_1}" == "--num" || "${OPT_STR_1}" == "-n" ]] ; then  
            b_DIS_NUM=1
        elif [[ "${OPT_STR_1}" == "--dir" || "${OPT_STR_1}" == "-d" ]] ; then  
            b_DIS_STYLE=1
        elif [[ "${OPT_STR_1}" == "--file" || "${OPT_STR_1}" == "-f" ]] ; then  
            b_DIS_STYLE=2
        elif [[ "${OPT_STR_1}" == "--apath" || "${OPT_STR_1}" == "-a" ]] ; then  
            b_ABS_PATH=1
        elif [[ "${OPT_STR_1}" == "--rpath" || "${OPT_STR_1}" == "-r" ]] ; then  
            b_ABS_PATH=0
        elif [[ "${OPT_STR_1}" == "-d" ]] ; then  
            if [[ ! -z "${OPT_STR_2}" ]] ; then 
                FIND_OPT_GLOBAL="${FIND_OPT_GLOBAL} -maxdepth ${OPT_STR_2}"
            fi
        elif [[ "${OPT_STR_1}" == "--nolink" || "${OPT_STR_1}" == "-nl" ]] ; then  
            b_NO_LINK=1
        elif [[ "${OPT_STR_1}" == "--not" || "${OPT_STR_1}" == "-n" ]] ; then  
            FIND_TEST_NOT="-not"
# --fname=-iname,-lname,-ilname
        elif [[ "${OPT_STR_1}" == "--fname" ]] ; then 
            if [[ -z "${OPT_STR_2}" ]] ; then 
                printf '\nERROR-1B: option %s cannot be empty!\n' "${OPT_STR_1}"
                exit 1
            fi 
            FIND_NAME="${OPT_STR_2}"
            if [[ ${b_DEBUG} -ne 0 ]] ; then 
                printf "\nINFO-7a: option %s: set find TEST name to: \"%s\"\n" "${OPT_STR_1}" "${FIND_NAME}"
            fi 
        elif [[ "${OPT_STR_1}" == "--ignorecase" ||  "${OPT_STR_1}" == "-i" ]] ; then  
            NAME_CASE="-iname"
        elif [[ "${OPT_STR_1}" == "--findlink" ||  "${OPT_STR_1}" == "-L" ]] ; then  
            b_FIND_LINK=1
            FIND_OPT1="-L"
        elif [[ "${OPT_STR_1}" == "--findopt" || "${OPT_STR_1}" == "-o" ]] ; then  
            if [[ ! -z "${OPT_STR_2}" ]] ; then 
                FIND_OPT1="${OPT_STR_2}"
            fi
        elif [[ "${OPT_STR_1}" == "--gopt1" ||  "${OPT_STR_1}" == "-g" ]] ; then  
            if [[ ! -z "${OPT_STR_2}" ]] ; then 
                FIND_OPT_GLOBAL="${FIND_OPT_GLOBAL} ${OPT_STR_2}"
            fi
        elif [[ "${OPT_STR_1}" == "-Ll" ||  "${OPT_STR_1}" == "-lL" ]] ; then  
            b_FIND_LINK=1
            b_LS_LONG=1
            FIND_OPT1="-L"
        elif [[ "${OPT_STR_1}" == "--long" || "${OPT_STR_1}" == "-l"  || "${OPT_STR_1}" == "-ls" ]] ; then  
            b_LS_LONG=1
        #==============================================================================
        elif [[ "${OPT_STR_1}" = "--optend" ]] ; then 
#
# no more options and skip this option 
#
            shift 1
            break 
        else
#
# anything don't know treat it as real argument
#
            ARG_SAVED+=("$1")
            N_ARG_SAVED=$((N_ARG_SAVED+1))
        fi
    else
#
# argument without '-' prefix
#
        ARG_SAVED+=("$1")
        N_ARG_SAVED=$((N_ARG_SAVED+1))
    fi
    OPT_CNT=$((OPT_CNT+1))
    shift 1
done 

while [[ ! -z "$1" ]] ; 
do 
    ARG_SAVED+=("$1")
    N_ARG_SAVED=$((N_ARG_SAVED+1))
    shift 1
done 

if [[ "${ARG_SAVED[0]}" == "" &&  "${FIND_PATTERN}" == "" ]] ; then 
    this_usage
    exit 1
fi

FIND_SPEC="${ARG_SAVED[@]}"
FIND_SPEC_BASENAME="`basename ${ARG_SAVED[0]}`"
FIND_SPEC_DIRNAME="`dirname ${ARG_SAVED[0]}`"

# restore GLOB
    set +f

if [[ ${b_DEBUG} -ne 0 ]] ; then 
    echo "FIND_SPEC=${FIND_SPEC}"
    echo "FIND_SPEC_BASENAME=${FIND_SPEC_BASENAME}"
    echo "FIND_SPEC_DIRNAME=${FIND_SPEC_DIRNAME}"
    echo "FIND_TYPE=${FIND_TYPE}"
    echo "FIND_OPT1=${FIND_OPT1}"
    echo "FIND_OPT_GLOBAL=${FIND_OPT_GLOBAL}"
    echo "FIND_TEST_NOT=${FIND_TEST_NOT}"
    echo "START_DIR=${START_DIR}"
    echo "b_NO_LINK=${b_NO_LINK}"
    echo "b_FIND_LINK=${b_FIND_LINK}"
    echo
    echo "find ${FIND_OPT1} ${START_DIR} ${FIND_OPT_GLOBAL} -type ${FIND_TYPE} ${FIND_TEST_NOT} ${NAME_CASE} ${FIND_SPEC_BASENAME}" 
    echo
fi

RESULT_LIST=""
FOUND_LIST="`find ${FIND_OPT1} ${START_DIR} ${FIND_OPT_GLOBAL} -type ${FIND_TYPE} ${FIND_TEST_NOT} ${NAME_CASE} "${FIND_SPEC_BASENAME}"`" 
# printf '\n\nDEBUG: FOUND_LIST=%s\n\n' "${FOUND_LIST}"
if [[ $? -eq 0 ]] ; then 
    if [[ ${b_DEBUG} -ne 0 ]] ; then 
        printf '\n=== start of FOUND_LIST ===\n'
        printf 'FOUND_LIST=\n%s\n' "${FOUND_LIST}"
        printf '=== end of FOUND_LIST ===\n\n'
    fi 
    if [[ "${FOUND_LIST}" != "" ]] ; then 
        if [[ ${b_ABS_PATH} -ne 0 ]] ; then  
#
# "--apath" || "-a" ]]
#
            RESULT_LIST="`echo "${FOUND_LIST}" | xargs realpath | sort`"
        else
#
# default 
#
            RESULT_LIST="`echo "${FOUND_LIST}" | sort`"
        fi
    fi 
fi

if [[ "${RESULT_LIST}" != "" ]] ; then 
#
    NEW_LIST=""
    if [[ ${b_DEBUG} -ne 0 ]] ; then 
        printf '\n=== start of RESULT_LIST ===\n'
        printf 'RESULT_LIST=\n%s\n' "${RESULT_LIST}"
        printf '=== end of  RESULT_LIST ===\n\n'
    fi 
#
    if [[ "${s_COLOR}" != "" ]] ; then 
        ${EXE_DIR}/asc ${s_COLOR}
    fi 
    if [[ ${b_NO_LINK} -ne 0 ]] ; then  
#
# print files that has NO symbolic links
#
# --long" | -l" | -ls
#
        NEW_LIST="`echo "${RESULT_LIST}" | uniq -u | xargs ls -l`"
        printf '%s\n' "${NEW_LIST}"
    elif [[ ${b_LS_LONG} -ne 0 ]] ; then  
#
# "-Ll" || "-lL" ]] 
#
        NEW_LIST="`echo "${RESULT_LIST}" | xargs ls -l`"
        printf '%s\n' "${NEW_LIST}"
    elif [[ ${b_DIS_STYLE} -ne 0 ]] ; then 
        LINE_NUM=0
        if [[ ${b_DIS_STYLE} -eq 1 ]] ; then 
# ===================================================================================
# -dir | -d
            MAX_STRLEN=0
            for line in ${RESULT_LIST}
            do 
                DIRNAME="$(dirname ${line})"
                if [[ ${#DIRNAME} -gt ${MAX_STRLEN} ]] ; then 
                    MAX_STRLEN=${#DIRNAME}
                fi
            done
#            if [[ ${b_DEBUG} -ne 0 ]] ; then 
#                printf '\nDEBUG: MAX_STRLEN=%d\n' ${MAX_STRLEN} 
#            fi
            for line in ${RESULT_LIST}
            do 
                LINE_NUM=$((LINE_NUM+1))
                FILE_BASENAME="$(basename ${line})"
                FILE_DIRNAME="$(dirname ${line})" 
                N_SPACES=$((MAX_STRLEN-${#FILE_DIRNAME})) 
#                if [[ ${b_DEBUG} -ne 0 ]] ; then 
#                    printf '\n DEBUG: N_SPACES=%d\n' ${N_SPACES}
#                fi
                if [[ ${b_DIS_NUM} -ne 0 ]] ; then 
                    printf %'02d\t' ${LINE_NUM}
                fi
                printf '%s ' "${FILE_DIRNAME}"
                n=0 
                while [[ ${n} -lt ${N_SPACES} ]]
                do 
                    printf ' '
                    n=$((n+1))
                done  
                printf '%s\n' "${FILE_BASENAME}" 
            done
        else
# ===================================================================================
# --file | -f
            MAX_STRLEN=0
            for line in ${RESULT_LIST}
            do 
                FILENAME="$(basename ${line})"
                if [[ ${#FILENAME} -gt ${MAX_STRLEN} ]] ; then 
                    MAX_STRLEN=${#FILENAME}
                fi
            done
#
#            if [[ ${b_DEBUG} -ne 0 ]] ; then 
#                printf '\nDEBUG: MAX_STRLEN=%d\n' ${MAX_STRLEN} 
#            fi
#
            for line in ${RESULT_LIST}
            do 
                LINE_NUM=$((LINE_NUM+1))
                FILE_BASENAME="$(basename ${line})"
                FILE_DIRNAME="$(dirname ${line})" 
                N_SPACES=$((MAX_STRLEN-${#FILE_BASENAME})) 
                if [[ ${b_DEBUG} -ne 0 ]] ; then 
                    printf '\n DEBUG: N_SPACES=%d\n' ${N_SPACES}
                fi
#                if [[ ${b_DIS_NUM} -ne 0 ]] ; then 
#                    printf '%02d\t' ${LINE_NUM}
#                fi
                printf '%s ' "${FILE_BASENAME}"
                n=0 
                while [[ ${n} -lt ${N_SPACES} ]]
                do 
                    printf ' '
                    n=$((n+1))
                done  
                printf '%s\n' "${FILE_DIRNAME}" 
            done
        fi 
    else
# =============================================================================
# default display 
#
        LINE_NUM=0
        for line in ${RESULT_LIST}
        do 
            LINE_NUM=$((LINE_NUM+1))
            if [[ ${b_DIS_NUM} -ne 0 ]] ; then 
                printf '%02d\t' ${LINE_NUM} 
            fi
            printf '%s\n' "${line}" 
        done 
    fi
    if [[ "${DO_EXE_CMD}" != "" ]] ; then
        # printf '\n DO_EXE_CMD= %s %s\n\n' "${DO_EXE_CMD}" "${RESULT_LIST}"
        N_LINES="`echo "${RESULT_LIST}" | wc -l`"
        if [[ ${N_LINES} -gt ${DO_EXE_CMD_MAX_ARGC} ]] ; then 
            ${EXE_DIR}/asc reset blink yellow
            printf '\n WARNING:\n' 
            ${EXE_DIR}/asc reset blue
            printf ' run '
            ${EXE_DIR}/asc yellow
            printf '%s' "${DO_EXE_CMD}"
            ${EXE_DIR}/asc blue
            printf ' with ' 
            ${EXE_DIR}/asc yellow 
            printf '%d' ${LINE_NUM}
            ${EXE_DIR}/asc reset blue
            printf ' (above pathnames) as arguments\n' ${LINE_NUM}
            ${EXE_DIR}/asc reset
            read -p "###  Are you sure you want to do it (y/n)?" CONT
            if [[ "${CONT}" != "Y" && "${CONT}" != "y" ]]; then		
	        printf "\n Abort Executing %s\n" "${DO_EXE_CMD}"
	        exit 11
            fi
        fi  
#        ${DO_EXE_CMD} ${RESULT_LIST} & 
        ${DO_EXE_CMD} ${FOUND_LIST} & 
    fi
#
    if [[ "${s_COLOR}" != "" ]] ; then 
        ${EXE_DIR}/asc reset
    fi 
fi
