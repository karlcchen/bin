#!/bin/bash
#

DEBUG_CTL=0

s_VERSION="1.2"

EXE_NAME="`realpath $0`"
EXE_BASE="`basename ${EXE_NAME}`"
EXE_DIR="`dirname ${EXE_NAME}`"

GREP_LS_TYPE='^d'
GREP_LS_OPT=""
LS_DIR="."
LS_OPT="-l"

N_ERROR=0

sta_LS_AWK_PRINTT_9=1
sta_ONLY_HIDDEN=0
sta_PASS_OPT_TO_LS=0

function this_usage() {
    printf '\n List Directory (Only) Version:%s\n' "${s_VERSION}"
    printf ' Usage:\n\t %s\t [DIR_PATH] [Options]\n' "${EXE_BASE}"
    printf ' Options:\n'
    printf '\t --hidden|-h  : list hiddne files only\n'
    printf '\t --long|-l    : list verbose/long files info\n'
    printf '\t --invert|-v  : invert grep file type of its internal \"ls -l\" output\n'
    printf '\p --pass|-p    : pass all unknow options to ls command, otherwise these are regarded as errors\n'
    printf '\t --help       : display this help messages\n'
    printf '\n Example:\n'
    printf '\t %s -h -l  : list current dir, hidden dir only, verbose file info\n' "${EXE_BASE}"
    printf '\t %s ..     : list .. directory, names only\n' "${EXE_BASE}"
}

while [[ $1 != "" ]]
do 
    if [[ -d "$1" ]]; then 
        LS_DIR="$1"
    elif [[ "$1" == "--long" || "$1" == "-l" ]]; then 
        sta_LS_AWK_PRINTT_9=0
    elif [[ "$1" == "--pass" || "$1" == "-p" ]]; then 
        sta_PASS_OPT_TO_LS=1
    elif [[ "$1" == "--hidden" || "$1" == "-h" ]]; then 
        sta_ONLY_HIDDEN=1
        LS_OPT="${LS_OPT} -a" 
    elif [[ "$1" == "--invert" || "$1" == "-v" ]]; then 
        GREP_LS_OPT="${GREP_LS_OPT} -v" 
    elif [[ "$1" == "--help" ]]; then 
        this_usage
    elif [[ "$1" == "--debug" ]]; then 
        DEBUG_CTL=1
    else
        if [[ ${sta_PASS_OPT_TO_LS} -ne 0 ]]; then 
            LS_OPT="${LS_OPT} $1" 
        else
            printf 'ERROR-00: unknown option found: %s\n' "$1"
            let N_ERROR+=1
        fi 
    fi 
    shift 1
done

if [[ ${N_ERROR} -ne 0 ]]; then 
    exit ${N_ERROR}
fi 

#if [[ $# != 0 ]]; then 
#    ls -l ${LS_DIR} | grep '^d' | awk '{print $9}'
#elif [[ "$1" == "-l" ]]; then 
#    ls -l ${LS_DIR} | grep '^d' 
#else
#    ls -l $1 | grep '^d' 
#fi
if [[ ${DEBUG_CTL} -ne 0 ]]; then 
    printf ' DEBUG_CTL=%s\n' "${DEBUG_CTL}"
    printf ' LS_DIR=%s\n' "${LS_DIR}"
    printf ' LS_OPT=%s\n' "${LS_OPT}"
    printf ' GREP_LS_OPT=%s\n' "${GREP_LS_OPT}"
fi

if [[ $sta_LS_AWK_PRINTT_9 -ne 0 ]]; then 
# only print colume 9 of "ls -l" 
# remove first line, which is "total xxxxx"
#
    LIST="`ls ${LS_OPT} ${LS_DIR} | tail -n +2 | grep ${GREP_LS_OPT} ${GREP_LS_TYPE}  | awk '{print $9}'`"

    if [[ ${DEBUG_CTL} -ne 0 ]]; then 
        printf '\n=== DEBUG-01 begin ===\n' 
        printf '%s' "${LIST}"
        printf '\n=== DEBUG-01 end ===\n\n' 
    fi 

    if [[ ${sta_ONLY_HIDDEN} -ne 0 ]]; then 
# only print dirs name starting with "."
# remove first two lines, which are "." and ".."
        printf '%s' "${LIST}" | grep "^\." | tail -n +3
    else
        printf '%s' "${LIST}"
    fi
else
# verbose output, do not remove other columns  
# remove first line, which  is "total xxxxx"
#
    LIST="`ls ${LS_OPT} ${LS_DIR} | tail -n +2 | grep ${GREP_LS_OPT} ${GREP_LS_TYPE}`" 

    if [[ ${DEBUG_CTL} -ne 0 ]]; then 
        printf '\n=== DEBUG-01 begin ===\n' 
        printf '%s' "${LIST}"
        printf '\n=== DEBUG-01 end ===\n\n' 
    fi 

    if [[ ${sta_ONLY_HIDDEN} -ne 0 ]]; then 
# only print dirs name starting with "."
# remove first two lines, which are "." and ".."
#        printf '%s\n' "${LIST}" | awk '$9 ~ /^[.]/' 
        printf '%s' "${LIST}" | awk '$9 ~ /^[.*]/' | tail -n +3
    else
        printf '%s' "${LIST}"
    fi
fi

printf '\n' 
