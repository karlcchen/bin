#!/bin/bash
#
# bbclean
#

GITLAB_SCX_SERVER=sonicgit

#ACTION_LIST="cleansstate cleanall"
ACTION_LIST="cleanall"
EXE_DIR="$(realpath $(dirname $0))"
EXE_BASENAME="`basename $0`"

WORK_BASE_DIR="build_output/work"
ARCH_DIR_ARM="aarch64-soniccorex-linux"
ARCH_DIR_INTEL="corei7-64-soniccorex-linux"

ping -c 1 ${GITLAB_SCX_SERVER} >/dev/null
if [[ $? -ne 0 ]] ; then 
    printf '\nERROR-99: ping %s failed!\n' "${GITLAB_SCX_SERVER}"
    exit 99
fi 

if [[ ! -d "${WORK_BASE_DIR}"  ]]; then 
    ${EXE_DIR}/asc green
    printf '\nERROR-1: Cannot find DIR' 
    ${EXE_DIR}/asc magenta
    printf '"%s"\n' "${WORK_BASE_DIR}" 
    ${EXE_DIR}/asc reset
    exit 99
fi 

if [[ -d "${WORK_BASE_DIR}/${ARCH_DIR_ARM}"  ]]; then 
    WORK_PATH="build_output/work/aarch64-soniccorex-linux"
#
    ${EXE_DIR}/asc magenta
    printf '\n### ARM AARCH64 '
    ${EXE_DIR}/asc green
    printf ' cross build\n'
    printf 'Work DIR: '
    ${EXE_DIR}/asc magenta
    printf '%s' "${WORK_BASE_DIR}/${ARCH_DIR_ARM}"
    ${EXE_DIR}/asc reset
#
elif [[ -d "${WORK_BASE_DIR}/${ARCH_DIR_INTEL}"  ]]; then  
    WORK_PATH="build_output/work/corei7-64-soniccorex-linux"
#
    ${EXE_DIR}/asc magenta
    printf '\n### INTEL CORE-i7 X86_64'
    ${EXE_DIR}/asc green
    printf 'target cross build\n'
    printf 'Work DIR: '
    ${EXE_DIR}/asc magenta
    printf '%s' "${WORK_BASE_DIR}/${ARCH_DIR_INTEL}"
    ${EXE_DIR}/asc reset
#
else
    ${EXE_DIR}/asc green
    printf '\nERROR-2: Cannot find DIR: ' "${ARCH_DIR_ARM}" "${ARCH_DIR_INTEL}"
    ${EXE_DIR}/asc magenta
    printf '\"%s\" or \"%s\"\n' "${ARCH_DIR_ARM}" "${ARCH_DIR_INTEL}"
    ${EXE_DIR}/asc green
    printf ' under work DIR: "%s"\n'
    printf '"%s"\n' "${WORK_BASE_DIR}"
    ${EXE_DIR}/asc green
    ls -l ${WORK_BASE_DIR}
    ${EXE_DIR}/asc reset
    exit 2
fi

if [[ "$1" = "" ]] ; then 
    printf '\nERROR-3: %s: no argument found!\n' "${EXE_BASENAME}"
    exit 3
fi 

N_LOOP=0
while [[ "$1" != "" ]] ; 
do 
    BB_RECIPE="$1"
    N_LOOP=$((N_LOOP+1))
# ====================================================
    for c_action in ${ACTION_LIST}
    do 
        ${EXE_DIR}/asc reset yellow
        printf '\n Loop #%d: ' ${N_LOOP} 
        ${EXE_DIR}/asc green 
        printf '%s' "$0"
        ${EXE_DIR}/asc magenta
        printf ' bitbake -c ' 
        ${EXE_DIR}/asc cyan
        printf '%s ' "${c_action}" 
        ${EXE_DIR}/asc magenta
        printf '%s\n\n' "${BB_RECIPE}"
        ${EXE_DIR}/asc reset 
    #
        bitbake -f -c ${c_action} ${BB_RECIPE} | tee ${BB_RECIPE}-${c_action}.log
	PIPE_STA="`echo "${PIPESTATUS[@]}"`"
        if [[ "${PIPE_STA}" != "0 0" ]] ; then
      	    ${EXE_DIR}/asc RED
            printf '\nERROR-5: \"bitbake -f -c %s %s\" failed!\n' "${c_action}" "${BB_RECIPE}"
            ${EXE_DIR}/asc reset
            exit 5
        fi
# ------------------------------------------------------------
        if [ -d "${WORK_PATH}/${BB_RECIPE}" && "${c_action}" == "clean" ] ; then 
            pushd .
            cd ${WORK_PATH}/${BB_RECIPE}
            if [ $? -ne 0 ] ; then
                ${EXE_DIR}/asc RED 
                printf '\nERROR-6: \"cd %s\" failed!\n' "${WORK_PATH}/${BB_RECIPE}"
                ${EXE_DIR}/asc reset
                exit 6
            fi 
            LS_RESULT="`ls -l`"
            if [ ! "${LS_RESULT}" = "total 0" ] ; then 
                ${EXE_DIR}/asc RED
                printf '\nERROR-7: folder %s not cleaned\n' "${WORK_PATH}/${BB_RECIPE}"
                printf ' INFO-7:\n %s\n\n' "${LS_RESULT}"
    	        ${EXE_DIR}/asc reset
                exit 7
            fi       
            popd 
        else
            printf '\nWARNING-8: Folder %s not found!\n' "${WORK_PATH}/${BB_RECIPE}"
        fi 
    done  
# =======================================================
    ${EXE_DIR}/asc yellow
    printf '\n Loop #%d: ' ${N_LOOP} 
    ${EXE_DIR}/asc green 
    printf '%s' "$0"
    ${EXE_DIR}/asc magenta
    printf ' bitbake ' 
    ${EXE_DIR}/asc cyan
    printf '%s\n\n' "${BB_RECIPE}"
    ${EXE_DIR}/asc reset
#
    bitbake ${BB_RECIPE} | tee ${BB_RECIPE}.log
    PIPE_STA="`echo "${PIPESTATUS[@]}"`"
    if [[ "${PIPE_STA}" != "0 0" ]] ; then
	${EXE_DIR}/asc red
        printf '\nERROR-9: \"bitbake %s\" failed!\n' "${BB_RECIPE}"
	${EXE_DIR}/asc reset
        exit 9
    fi 
# ====================================================
    ${EXE_DIR}/asc green 
    printf '\n##### '
    ${EXE_DIR}/asc yellow
    printf 'LOOP #%d: ' ${N_LOOP} 
    ${EXE_DIR}/asc magenta
    printf 'bitbake %s ' "${BB_RECIPE}"
#
    ${EXE_DIR}/asc green
    printf 'completed without error #####\n'
    ${EXE_DIR}/asc reset 
    shift 1
done

